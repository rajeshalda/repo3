
 
Table of Contents
1. Introduction	2
2. Requirement to Run Application	2
2.1 Microsoft Entra ID App Registration	2
2.1.1Application Identifiers (Environment Variables)	2
2.2 API Permissions	2
2.2	Authentication Configuration	3
2.3 Microsoft Teams Application Access Policies	3
2.4 Windows Server Deployment & ADCS Certificate	4
2.4.1 Server Requirements	4
3. IT Support Configuration Tasks	4
3.1 Add a DNS Entry for Your Internal Server	4
3.2 Duplicate the Web Server Certificate Template	5
3.3 Modify Template Properties (for Enrollment Permissions)	5
3.4 Publish the Template for Enrollment	6
4. Role Requirements	6



 
1. Introduction
Request for IT Support -- Microsoft Entra ID and Microsoft Teams Setup for Meeting Time Tracker
We are in the process of implementing Meeting Time Tracker, a productivity tool that integrates with Microsoft Teams and Microsoft Entra ID to help track and analyze meeting durations across our organization.
To complete the integration, we require support in configuring the necessary Microsoft Entra ID permissions, Microsoft Teams access policies, and authentication settings.
2. Requirement to Run Application
2.1 Microsoft Entra ID App Registration

A new app registration will be created in Microsoft Entra ID specifically for the Meeting Time Tracker application. This registration will serve as the identity foundation for secure integration with Microsoft 365 services.
2.1.1Application Identifiers (Environment Variables)

The following identifiers are required as environment variables for secure application configuration:
•	Application (client) ID: Unique identifier for the registered application
•	Directory (tenant) ID: Organization's tenant identifier in Microsoft Entra ID
•	Client secrets (secrets) ID: Secure authentication key for server-to-server communication

2.2 API Permissions

Permission	Type	Purpose
Calendars.Read	Delegated & Application	Read user and organization calendars
Group.Read.All	Delegated	Access M365 group information
OnlineMeetingArtifact.Read	Application	Read Teams meeting artifacts
OnlineMeetings.Read	Delegated	Read user’s online meetings
Reports.Read.All	Delegated & Application	Access meeting usage data
User.Read	Delegated	Read basic user profile
User.Read.All	Application	Read full profiles of all users

Why These Permissions Are Required: These permissions enable our application to properly read Teams calendar details for logged-in users and retrieve comprehensive meeting information including duration, participants, and meeting artifacts necessary for accurate time tracking and analysis.
These permissions require admin consent, which must be granted by a Global Administrator privileges or equivalent administrative rights.
2.2	Authentication Configuration
Authentication Configuration in App Registration
•	Configure authentication with appropriate redirect URIs: Set up single-page application redirect URIs (HTTPS URLs required for security)
•	Enable Mobile and desktop applications Redirect URIs: Allow authentication from various client types
•	Enable "Accounts in this organizational directory only": Configure single-tenant authentication for organizational security
•	Enable "Allow public client flows": Permit secure authentication flows for the application

Why This Configuration Is Required: These authentication settings ensure users can properly authenticate with our application while maintaining organizational security through single-tenant configuration and secure HTTPS redirect URIs.
2.3 Microsoft Teams Application Access Policies
The application requires specific Microsoft Teams application access policies to be configured. These must be created and assigned using PowerShell by an Global Administrator privileges or equivalent administrative rights. 
#Connect-MicrosoftTeams
#New-CsApplicationAccessPolicy -Identity "EXAMPLE" -AppIds "EXAMPLE" -Description "Calendar Fetch"
#Get-CsApplicationAccessPolicy | Format-List
#Grant-CsApplicationAccessPolicy -PolicyName "EXAMPLE" -Identity "EXAMPLE"
#Get-CsOnlineUser -Filter {ApplicationAccessPolicy -eq "EXAMPLE"} | Select-Object DisplayName, UserPrincipalName
Why This Is Required: These policies enable users to properly utilize the application to access Teams meeting data and retrieve accurate meeting durations for time tracking purposes.


2.4 Windows Server Deployment & ADCS Certificate
2.4.1 Server Requirements

Operating System: Windows Server 2019 or later 

Why Windows Server Is Required: We need Windows Server to host our application where we can utilize IIS Manager to deploy and manage our web application effectively in the corporate environment.
ADCS Certificate

Why ADCS Certificate Is Required: ADCS provides SSL certificates necessary to secure our application with HTTPS encryption, ensuring data protection and compliance with security standards.
3. IT Support Configuration Tasks

The following configuration tasks must be performed by IT Support to properly set up the infrastructure:
1.	Add a DNS entry for your internal server
2.	Duplicate the Web Server certificate template in ADCS
3.	Modify the template properties and assign enrollment permissions to the required machine( IIS server).
3.1 Add a DNS Entry for Your Internal Server

To ensure your server is accessible by name, you'll need to create a DNS record (such as mtt.lab.local or whatever you choose). This is necessary for proper certificate validation.
Steps to Add DNS Entry:
1.	Open DNS Manager: 
o	On your DNS Server, open DNS Manager (dnsmgmt.msc)
2.	Create a New A Record: 
o	Right-click on the Forward Lookup Zone where your internal DNS entries are stored (e.g., lab.local)
o	Select New Host (A or AAAA)...
3.	Enter DNS Name: 
o	Name: mtt (or the name you want, for example, meeting-time-tracker)
o	IP Address: Enter the IP address of the machine (iis server) (e.g., 192.168.10.10)
4.	Click Add and then OK
3.2 Duplicate the Web Server Certificate Template

To issue a custom certificate template for web servers (such as IIS), you can duplicate the default Web Server template.
Steps to Duplicate the Web Server Certificate Template:
1.	Open Certificate Templates Console: 
o	On your CA server, press Windows + R, type certtmpl.msc, and press Enter. This opens the Certificate Templates Console
2.	Find the Web Server Template: 
o	Scroll down and find the Web Server template. Right-click on it and choose Duplicate Template
3.	Configure the New Template: 
o	In the General tab, change the template name (e.g., IIS Web Server Certificate) (optional)
3.3 Modify Template Properties (for Enrollment Permissions)

Now, you need to ensure the server (or user) requesting the certificate has the necessary enrollment permissions.
Steps to Modify Template Properties:
1.	Open the Template Properties: 
o	After duplicating the template, right-click on the new template (e.g., IIS Web Server Certificate) and select Properties
2.	Go to Security Tab: 
o	In the Security tab, click Add
o	Add the machine(IIS server)  that should be allowed to enroll the certificate. This could be: 
	IIS Servers 
	Specific Machine (e.g., LabServer01$)
3.	Grant Enroll Permission: 
o	Select the added machine (IIS server)
o	Ensure that Enroll is checked
4.	Click OK to save the permissions

3.4 Publish the Template for Enrollment

Once the permissions are set, you need to publish the template to make it available for enrollment requests.
Steps to Publish the Template:
1.	Open Certification Authority: 
o	On your CA server, press Windows + R, type certsrv.msc, and press Enter to open Certification Authority
2.	Publish the Template: 
o	In the Certification Authority console, right-click on Certificate Templates in the left panel.
o	Select New > Certificate Template to Issue
o	Choose the template you just created (e.g., IIS Web Server Certificate)
o	Click OK to publish the template

4. Role Requirements
We kindly request that an individual with Global Administrator privileges or equivalent administrative rights be assigned to perform the required setup for the application.
